// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.2
// source: user.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	UserService_AddUser_FullMethodName              = "/pb.UserService/AddUser"
	UserService_AddUserVerbose_FullMethodName       = "/pb.UserService/AddUserVerbose"
	UserService_AddUsers_FullMethodName             = "/pb.UserService/AddUsers"
	UserService_AddUserBidirectional_FullMethodName = "/pb.UserService/AddUserBidirectional"
)

// UserServiceClient is the client API for UserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserServiceClient interface {
	AddUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error)
	AddUserVerbose(ctx context.Context, in *User, opts ...grpc.CallOption) (grpc.ServerStreamingClient[UserResultStream], error)
	AddUsers(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[User, Users], error)
	AddUserBidirectional(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[User, UserResultStream], error)
}

type userServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserServiceClient(cc grpc.ClientConnInterface) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) AddUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(User)
	err := c.cc.Invoke(ctx, UserService_AddUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) AddUserVerbose(ctx context.Context, in *User, opts ...grpc.CallOption) (grpc.ServerStreamingClient[UserResultStream], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &UserService_ServiceDesc.Streams[0], UserService_AddUserVerbose_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[User, UserResultStream]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type UserService_AddUserVerboseClient = grpc.ServerStreamingClient[UserResultStream]

func (c *userServiceClient) AddUsers(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[User, Users], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &UserService_ServiceDesc.Streams[1], UserService_AddUsers_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[User, Users]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type UserService_AddUsersClient = grpc.ClientStreamingClient[User, Users]

func (c *userServiceClient) AddUserBidirectional(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[User, UserResultStream], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &UserService_ServiceDesc.Streams[2], UserService_AddUserBidirectional_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[User, UserResultStream]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type UserService_AddUserBidirectionalClient = grpc.BidiStreamingClient[User, UserResultStream]

// UserServiceServer is the server API for UserService service.
// All implementations must embed UnimplementedUserServiceServer
// for forward compatibility.
type UserServiceServer interface {
	AddUser(context.Context, *User) (*User, error)
	AddUserVerbose(*User, grpc.ServerStreamingServer[UserResultStream]) error
	AddUsers(grpc.ClientStreamingServer[User, Users]) error
	AddUserBidirectional(grpc.BidiStreamingServer[User, UserResultStream]) error
	mustEmbedUnimplementedUserServiceServer()
}

// UnimplementedUserServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUserServiceServer struct{}

func (UnimplementedUserServiceServer) AddUser(context.Context, *User) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUser not implemented")
}
func (UnimplementedUserServiceServer) AddUserVerbose(*User, grpc.ServerStreamingServer[UserResultStream]) error {
	return status.Errorf(codes.Unimplemented, "method AddUserVerbose not implemented")
}
func (UnimplementedUserServiceServer) AddUsers(grpc.ClientStreamingServer[User, Users]) error {
	return status.Errorf(codes.Unimplemented, "method AddUsers not implemented")
}
func (UnimplementedUserServiceServer) AddUserBidirectional(grpc.BidiStreamingServer[User, UserResultStream]) error {
	return status.Errorf(codes.Unimplemented, "method AddUserBidirectional not implemented")
}
func (UnimplementedUserServiceServer) mustEmbedUnimplementedUserServiceServer() {}
func (UnimplementedUserServiceServer) testEmbeddedByValue()                     {}

// UnsafeUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServiceServer will
// result in compilation errors.
type UnsafeUserServiceServer interface {
	mustEmbedUnimplementedUserServiceServer()
}

func RegisterUserServiceServer(s grpc.ServiceRegistrar, srv UserServiceServer) {
	// If the following call pancis, it indicates UnimplementedUserServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&UserService_ServiceDesc, srv)
}

func _UserService_AddUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).AddUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_AddUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).AddUser(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_AddUserVerbose_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(User)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UserServiceServer).AddUserVerbose(m, &grpc.GenericServerStream[User, UserResultStream]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type UserService_AddUserVerboseServer = grpc.ServerStreamingServer[UserResultStream]

func _UserService_AddUsers_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(UserServiceServer).AddUsers(&grpc.GenericServerStream[User, Users]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type UserService_AddUsersServer = grpc.ClientStreamingServer[User, Users]

func _UserService_AddUserBidirectional_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(UserServiceServer).AddUserBidirectional(&grpc.GenericServerStream[User, UserResultStream]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type UserService_AddUserBidirectionalServer = grpc.BidiStreamingServer[User, UserResultStream]

// UserService_ServiceDesc is the grpc.ServiceDesc for UserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddUser",
			Handler:    _UserService_AddUser_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AddUserVerbose",
			Handler:       _UserService_AddUserVerbose_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "AddUsers",
			Handler:       _UserService_AddUsers_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "AddUserBidirectional",
			Handler:       _UserService_AddUserBidirectional_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "user.proto",
}
